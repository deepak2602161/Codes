
# This file was *autogenerated* from the file summation_polynomials.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
import time
#k should be greater than 2.
def summation_poly(k, R, A, B):
    F = R.base_ring()
    a = F.gens()[_sage_const_0 ]
    x = R.gens()
    S = [_sage_const_1 , x[_sage_const_0 ] - x[_sage_const_1 ]]
    S = S + [(x[_sage_const_0 ] - x[_sage_const_1 ])**_sage_const_2 *x[_sage_const_2 ]**_sage_const_2  - _sage_const_2 *((x[_sage_const_0 ] + x[_sage_const_1 ])*(x[_sage_const_0 ]*x[_sage_const_1 ] + A) + _sage_const_2 *B)*x[_sage_const_2 ] + (x[_sage_const_0 ]*x[_sage_const_1 ] - A)**_sage_const_2  - _sage_const_4 *B*(x[_sage_const_0 ] + x[_sage_const_1 ])]
    S1 = PolynomialRing(R, 'X')
    X = S1.gens()[_sage_const_0 ]
    t1 = list(x) 
    t2 = list(x)
    t1[k-_sage_const_2 ] = X 
    t2 = [x[k-_sage_const_2 ], x[k-_sage_const_1 ], X] + t2[_sage_const_3 :]
    if k==_sage_const_3 :
        return S[k-_sage_const_1 ]
    elif k == _sage_const_4 :
        f_1 = S[_sage_const_2 ](t1)
        f_2 = S[_sage_const_2 ](t2)
        M1 = f_1.sylvester_matrix(f_2, X)
        S = S + [M1.determinant()]
        return S[k-_sage_const_1 ]
    else:
        f = summation_poly(k-_sage_const_1 , R, A, B)
        S = S + [f]
        M = f(t1).sylvester_matrix(S[_sage_const_2 ](t2), X) 
        S = S + [M.determinant()]
    return S[-_sage_const_1 ]

n = input("insert the degree of the extension field")
p = input("insert the prime.")
k = input("insert the index for the required summation polynomial.")
A, B = input("insert the parameters of required elliptic curve.")
F = GF(p**n, 'a')
R = PolynomialRing(F, 'x', k, order = 'lex')
x = list(R.gens())
print time.time()
print(summation_poly(k, R, A, B).degree(x[_sage_const_0 ]))
print(summation_poly(k, R, A, B))
print time.time()

